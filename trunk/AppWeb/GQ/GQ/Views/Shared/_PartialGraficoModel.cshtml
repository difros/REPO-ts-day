<!-- Content Header (Page header) -->
<meta charset="utf-8">
<link href="~/nvd3-master/build/nv.d3.css" rel="stylesheet" type="text/css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.2/d3.min.js" charset="utf-8"></script>
<script src="~/nvd3-master/build/nv.d3.js"></script>

<style>
    text {
        font: 12px sans-serif;
    }
    svg {
        display: block;
    }
    html, body, #chart1, svg {
        margin: 0px;
        padding: 0px;
        height: 100%;
        width: 100%;
    }
    #chartZoom {
        position: absolute;
        top: 0;
        left: 0;
    }
</style>


<!-- Content Body -->
<div id="chartZoom">
    <a href="#" id="zoomIn">Zoom In</a> <a href="#" id="zoomOut">Zoom Out</a>
</div>
<div id="chart1" class='with-transitions'>
    <svg></svg>
</div>

@*@section Scripts{
    <script src="~/js/controller/grafico/graficoController.js"></script>
}*@

<script>
    nv.addGraph(function () {
        var chart = nv.models.lineChart();
        var fitScreen = false;
        var width = 600;
        var height = 300;
        var zoom = 1;

        chart.useInteractiveGuideline(true);
        chart.xAxis
            .axisLabel('AÑO')
            .tickFormat(d3.format(',r'));

        chart.lines.dispatch.on("elementClick", function (evt) {
            console.log(evt);
        });

        chart.yAxis
            .axisLabel('GAS')
            .tickFormat(d3.format(',.2f'));

        d3.select('#chart1 svg')
            .attr('perserveAspectRatio', 'xMinYMid')
            .attr('width', width)
            .attr('height', height)
            .datum(sinAndCos());

        setChartViewBox();
        resizeChart();

        nv.utils.windowResize(resizeChart);

        d3.select('#zoomIn').on('click', zoomIn);
        d3.select('#zoomOut').on('click', zoomOut);


        function setChartViewBox() {
            var w = width * zoom,
                h = height * zoom;

            chart
                .width(w)
                .height(h);

            d3.select('#chart1 svg')
                .attr('viewBox', '0 0 ' + w + ' ' + h)
                .transition().duration(500)
                .call(chart);
        }

        function zoomOut() {
            zoom += .25;
            setChartViewBox();
        }

        function zoomIn() {
            if (zoom <= .5) return;
            zoom -= .25;
            setChartViewBox();
        }

        // This resize simply sets the SVG's dimensions, without a need to recall the chart code
        // Resizing because of the viewbox and perserveAspectRatio settings
        // This scales the interior of the chart unlike the above
        function resizeChart() {
            var container = d3.select('#chart1');
            var svg = container.select('svg');

            if (fitScreen) {
                // resize based on container's width AND HEIGHT
                var windowSize = nv.utils.windowSize();
                svg.attr("width", windowSize.width);
                svg.attr("height", windowSize.height);
            } else {
                // resize based on container's width
                var aspect = chart.width() / chart.height();
                var targetWidth = parseInt(container.style('width'));
                svg.attr("width", targetWidth);
                svg.attr("height", Math.round(targetWidth / aspect));
            }
        }
        return chart;
    });

    function sinAndCos() {
        var sin0 = [384300, 383600, 389200, 393400, 382900, 393400],
            cos0 = [375200, 373100, 383600, 392700, 385700, 392700],
            sin = [],
            cos = [];

        var i, j;
        for (i = 0, j = 2016; i < sin0.length; i++ , j++) {
            sin.push({ x: j, y: sin0[i] });
            cos.push({ x: j, y: cos0[i] });
        }


        return [
            {
                values: sin,
                key: "S1",
                color: "#ff7f0e"
            },
            {
                values: cos,
                key: "S2",
                color: "#2ca02c"
            }
        ];
    }
</script>nv.addGraph(function () {
    var chart = nv.models.lineChart();
    var fitScreen = false;
    var width = 600;
    var height = 300;
    var zoom = 1;

    chart.useInteractiveGuideline(true);
    chart.xAxis
        .axisLabel('AÑO')
        .tickFormat(d3.format(',r'));

    chart.lines.dispatch.on("elementClick", function (evt) {
        console.log(evt);
    });

    chart.yAxis
        .axisLabel('GAS')
        .tickFormat(d3.format(',.2f'));

    d3.select('#chart1 svg')
        .attr('perserveAspectRatio', 'xMinYMid')
        .attr('width', width)
        .attr('height', height)
        .datum(sinAndCos());

    setChartViewBox();
    resizeChart();

    nv.utils.windowResize(resizeChart);

    d3.select('#zoomIn').on('click', zoomIn);
    d3.select('#zoomOut').on('click', zoomOut);


    function setChartViewBox() {
        var w = width * zoom,
            h = height * zoom;

        chart
            .width(w)
            .height(h);

        d3.select('#chart1 svg')
            .attr('viewBox', '0 0 ' + w + ' ' + h)
            .transition().duration(500)
            .call(chart);
    }

    function zoomOut() {
        zoom += .25;
        setChartViewBox();
    }

    function zoomIn() {
        if (zoom <= .5) return;
        zoom -= .25;
        setChartViewBox();
    }

    // This resize simply sets the SVG's dimensions, without a need to recall the chart code
    // Resizing because of the viewbox and perserveAspectRatio settings
    // This scales the interior of the chart unlike the above
    function resizeChart() {
        var container = d3.select('#chart1');
        var svg = container.select('svg');

        if (fitScreen) {
            // resize based on container's width AND HEIGHT
            var windowSize = nv.utils.windowSize();
            svg.attr("width", windowSize.width);
            svg.attr("height", windowSize.height);
        } else {
            // resize based on container's width
            var aspect = chart.width() / chart.height();
            var targetWidth = parseInt(container.style('width'));
            svg.attr("width", targetWidth);
            svg.attr("height", Math.round(targetWidth / aspect));
        }
    }
    return chart;
});

function sinAndCos() {
    var sin0 = [384300, 383600, 389200, 393400, 382900, 393400],
        cos0 = [375200, 373100, 383600, 392700, 385700, 392700],
        sin = [],
        cos = [];

    var i, j;
    for (i = 0, j = 2016; i < sin0.length; i++ , j++) {
        sin.push({ x: j, y: sin0[i] });
        cos.push({ x: j, y: cos0[i] });
    }


    return [
        {
            values: sin,
            key: "S1",
            color: "#ff7f0e"
        },
        {
            values: cos,
            key: "S2",
            color: "#2ca02c"
        }
    ];
}