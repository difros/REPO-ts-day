{"tables":[{"tableName":"gq_accesos","tableNameClassName":"Gq_accesos","tipo":"BASE TABLE","createTime":"\/Date(-62135586000000)\/","updateTime":"\/Date(-62135586000000)\/","comment":null,"selected":true},{"tableName":"gq_grafico","tableNameClassName":"Gq_grafico","tipo":"BASE TABLE","createTime":"\/Date(-62135586000000)\/","updateTime":"\/Date(-62135586000000)\/","comment":null,"selected":true},{"tableName":"gq_menu","tableNameClassName":"Gq_menu","tipo":"BASE TABLE","createTime":"\/Date(-62135586000000)\/","updateTime":"\/Date(-62135586000000)\/","comment":null,"selected":true},{"tableName":"gq_perfiles","tableNameClassName":"Gq_perfiles","tipo":"BASE TABLE","createTime":"\/Date(-62135586000000)\/","updateTime":"\/Date(-62135586000000)\/","comment":null,"selected":true},{"tableName":"gq_perfiles_accesos","tableNameClassName":"Gq_perfiles_accesos","tipo":"BASE TABLE","createTime":"\/Date(-62135586000000)\/","updateTime":"\/Date(-62135586000000)\/","comment":null,"selected":true},{"tableName":"gq_smtp_config","tableNameClassName":"Gq_smtp_config","tipo":"BASE TABLE","createTime":"\/Date(-62135586000000)\/","updateTime":"\/Date(-62135586000000)\/","comment":null,"selected":true},{"tableName":"gq_usuarios","tableNameClassName":"Gq_usuarios","tipo":"BASE TABLE","createTime":"\/Date(-62135586000000)\/","updateTime":"\/Date(-62135586000000)\/","comment":null,"selected":true},{"tableName":"versioninfo","tableNameClassName":"Versioninfo","tipo":"BASE TABLE","createTime":"\/Date(-62135586000000)\/","updateTime":"\/Date(-62135586000000)\/","comment":null,"selected":false}],"fileName":"D:\\PROYECTOS\\MEM\\code\\src\\trunk\\codegen\\MEM.prj","templateName":"MEM","templateText":"\u003c%-references\r\nsystem.Windows.Forms.dll\r\nsystem.dll\r\n%\u003e\r\n\u003c%-namespaces\r\nusing System.Windows.Forms;\r\n%\u003e\r\n\u003c%-class\r\npublic class Util\r\n{\r\n\tpublic static void MakeDirectory(string path)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif(!Directory.Exists(path))\r\n                Directory.CreateDirectory(path);\r\n       \t}\r\n       \tcatch(Exception ex){}\r\n\t}\r\n}\r\n%\u003e\r\n\u003c%\r\nstring clientPath = templateProject.directoryPath + @\"client\\\"+ templateProject.namespaceBase.Replace(\".\", @\"\\\")+@\"\\\";\r\nstring serverPath = templateProject.directoryPath + templateProject.namespaceBase.Replace(\".\", @\"\\\")+@\"\\\";\r\n\r\nStreamWriter writer = null;\r\n/*\r\n\r\nGENERACION CLASE DOMAIN CODEGEN\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"domain\");\r\nwriter = new StreamWriter(serverPath + @\"domain\\codegen.cs\");\r\n\r\n\r\n\t\t\r\n%\u003e\r\nusing GQService.com.gq.dto;\r\nusing System;\r\n\r\nnamespace \u003c%=templateProject.namespaceBase%\u003e.domain.codegen\r\n{\r\n\u003c%\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n%\u003e\r\n    public class _\u003c%=table.tableNameClassName%\u003e : IEntity\r\n    {\r\n\u003c%\t\t\t\r\n\t\tforeach(Columns column in table.columns())\r\n\t\t{\r\n%\u003e\r\n        public virtual \u003c%=column.CSharpType.FullName%\u003e\u003c%=((column.isPrimary==true||column.isNullable) \u0026\u0026 (column.CSharpType.FullName!=\"System.String\" \u0026\u0026 column.CSharpType.FullName!=\"System.Byte[]\"))?\"?\":\"\"%\u003e \u003c%=column.getColumnNameUpper()%\u003e { get; set; }\r\n\r\n\u003c%\r\n\t\t}%\u003e\r\n    }\r\n\u003c%\r\n\t\t\r\n\t}\r\n}\r\n%\u003e\r\n}\r\n\u003c%\r\nwriter.Flush();\r\nwriter.Close();\r\nwriter.Dispose();\r\n\r\n/*\r\n\r\nGENERACION CLASE DOMAIN\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"domain\");\r\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\t\twriter = new StreamWriter(serverPath + @\"domain\\\" + table.tableNameClassName + \".cs\");\r\n%\u003e\r\nusing \u003c%=templateProject.namespaceBase%\u003e.domain.codegen;\r\nusing System;\r\n\r\nnamespace \u003c%=templateProject.namespaceBase%\u003e.domain\r\n{\r\n    public class \u003c%=table.tableNameClassName%\u003e:_\u003c%=table.tableNameClassName%\u003e\r\n    {\r\n    }\r\n}\r\n\u003c%\r\n\t\twriter.Flush();\r\n\t\twriter.Close();\r\n\t\twriter.Dispose();\r\n\t}\r\n}\r\n\r\n\r\n/*\r\n\r\nGENERACION CLASE JS DTO\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"JSDTO\");\r\nwriter = new StreamWriter(serverPath + @\"JSDTO\\dto.js\");\r\n%\u003e\r\nFunction.prototype.extends = function (parent) {\r\n    this.prototype = Object.create(parent.prototype);\r\n};\r\n\u003c%\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n%\u003e\r\n\r\nvar _\u003c%=table.tableNameClassName%\u003eDto = function (value) {\r\n\t\r\n\tvalue = (value==null||value===undefined)?{}:value;\r\n\t\r\n\tif(isArray(value))\r\n    {\r\n        var result = value;\r\n\r\n        for (var i = 0; i \u003c result.length; i++) {\r\n        \tresult[i].selfData = undefined;\r\n            result[i] = new \u003c%=table.tableNameClassName%\u003eDto(result[i]);\r\n        }\r\n\r\n        return result;\r\n    }\r\n    \r\n    value.selfData = undefined;\r\n    \r\n    var self = this;\r\n\r\n\tself.selfData = value;\r\n\t\r\n    self.className = \"\u003c%=templateProject.namespaceBase%\u003e.dto.\u003c%=table.tableNameClassName%\u003eDto\";\r\n\u003c%\t\t\t\r\n\t\tforeach(Columns column in table.columns())\r\n\t\t{\r\n%\u003e\r\n    self.\u003c%=column.getColumnNameUpper()%\u003e=value.\u003c%=column.getColumnNameUpper()%\u003e===undefined?\u003c%=(((column.isPrimary==true||column.isNullable) \u0026\u0026 column.CSharpType.FullName!=\"System.String\")?\" null \":(column.CSharpType.FullName==\"System.String\"?\" \\\"\\\" \":(column.CSharpType.FullName==\"System.DateTime\"?\" new Date() \":\" 0 \"))) %\u003e:value.\u003c%=column.getColumnNameUpper()%\u003e;\r\n\u003c%\t\t}%\u003e\r\n};\r\n\u003c%\r\n\t\t\r\n\t}\r\n}\r\nwriter.Flush();\r\nwriter.Close();\r\nwriter.Dispose();\r\n\r\n\r\n/*\r\n\r\nGENERACION CLASE JS DTO\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"JSDTO\");\r\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\t\twriter = new StreamWriter(serverPath + @\"JSDTO\\\" + table.tableNameClassName + \"Dto.js\");\r\n%\u003e\r\nvar \u003c%=table.tableNameClassName%\u003eDto = function(value) {\r\n    var self = this;\r\n\r\n    var data = _\u003c%=table.tableNameClassName%\u003eDto.apply(self, arguments);\r\n    if (isArray(data)) {\r\n        return data;\r\n    }\r\n\tvalue = (value==null||value===undefined)?{}:value;\r\n}\r\n\r\n\u003c%=table.tableNameClassName%\u003eDto.extends(_\u003c%=table.tableNameClassName%\u003eDto);\r\n\u003c%\r\n\t\twriter.Flush();\r\n\t\twriter.Close();\r\n\t\twriter.Dispose();\r\n\t}\r\n}\r\n\r\n\r\n/*\r\n\r\nGENERACION CLASE DTO CODEGEN\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"dto\");\r\n\r\nwriter = new StreamWriter(serverPath + @\"dto\\codegen.cs\");\r\n\r\n%\u003e\r\nusing \u003c%=templateProject.namespaceBase%\u003e.domain;\r\nusing System;\r\nusing System.Collections.Generic;\r\nusing GQService.com.gq.dto;\r\n\r\nnamespace \u003c%=templateProject.namespaceBase%\u003e.dto.codegen\r\n{\r\n\u003c%\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n%\u003e\r\n\r\n    public class _\u003c%=table.tableNameClassName%\u003eDto : Dto\u003c\u003c%=table.tableNameClassName%\u003e,\u003c%=table.tableNameClassName%\u003eDto\u003e\r\n    {\r\n    \tpublic _\u003c%=table.tableNameClassName%\u003eDto() : base()\r\n    \t{\r\n    \t}\r\n    \t\r\n    \tpublic _\u003c%=table.tableNameClassName%\u003eDto( \u003c%=table.tableNameClassName%\u003e value) : base(value)\r\n    \t{\r\n    \t}\r\n\u003c%\t\t\t\r\n\t\tforeach(Columns column in table.columns())\r\n\t\t{\r\n%\u003e\r\n        public virtual \u003c%=column.CSharpType.FullName%\u003e\u003c%=((column.isPrimary==true||column.isNullable) \u0026\u0026 (column.CSharpType.FullName!=\"System.String\" \u0026\u0026 column.CSharpType.FullName!=\"System.Byte[]\"))?\"?\":\"\"%\u003e \u003c%=column.getColumnNameUpper()%\u003e { get; set; }\r\n\r\n\u003c%\r\n\t\t}%\u003e\r\n    }\r\n\u003c%\r\n\t}\r\n}\r\n%\u003e\r\n}\r\n\u003c%\r\nwriter.Flush();\r\nwriter.Close();\r\nwriter.Dispose();\r\n\r\n/*\r\n\r\nGENERACION CLASE DTO\r\n\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"dto\");\r\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\t\twriter = new StreamWriter(serverPath + @\"dto\\\" + table.tableNameClassName + \"Dto.cs\");\r\n%\u003e\r\nusing \u003c%=templateProject.namespaceBase%\u003e.domain;\r\nusing \u003c%=templateProject.namespaceBase%\u003e.dto.codegen;\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace \u003c%=templateProject.namespaceBase%\u003e.dto\r\n{\r\n    public class \u003c%=table.tableNameClassName%\u003eDto : _\u003c%=table.tableNameClassName%\u003eDto\r\n    {\r\n        public \u003c%=table.tableNameClassName%\u003eDto():base()\r\n        {\r\n        }\r\n       \r\n        public \u003c%=table.tableNameClassName%\u003eDto(\u003c%=table.tableNameClassName%\u003e value):base(value)\r\n        {\r\n        }\r\n    }\r\n}\r\n\u003c%\r\n\t\twriter.Flush();\r\n\t\twriter.Close();\r\n\t\twriter.Dispose();\r\n\t}\r\n}\r\n\r\n/*\r\n\r\nGENERACION CLASE XAMARIN\r\n\r\n\r\n*/\r\n/*\r\n\r\nGENERACION CLASE XAMARIN DTO CODEGEN\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"Xamarin_dto\");\r\n\r\nwriter = new StreamWriter(serverPath + @\"Xamarin_dto\\codegen.cs\");\r\n\r\n%\u003e\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace \u003c%=templateProject.namespaceBase%\u003e.dto.codegen\r\n{\r\n\u003c%\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n%\u003e\r\n\r\n    public class _\u003c%=table.tableNameClassName%\u003eDto\r\n    {\r\n\u003c%\t\t\t\r\n\t\tforeach(Columns column in table.columns())\r\n\t\t{\r\n%\u003e\r\n        public virtual \u003c%=column.CSharpType.FullName%\u003e\u003c%=((column.isPrimary==true||column.isNullable) \u0026\u0026 (column.CSharpType.FullName!=\"System.String\" \u0026\u0026 column.CSharpType.FullName!=\"System.Byte[]\"))?\"?\":\"\"%\u003e \u003c%=column.getColumnNameUpper()%\u003e { get; set; }\r\n\r\n\u003c%\r\n\t\t}%\u003e\r\n    }\r\n\u003c%\r\n\t}\r\n}\r\n%\u003e\r\n}\r\n\u003c%\r\nwriter.Flush();\r\nwriter.Close();\r\nwriter.Dispose();\r\n\r\n/*\r\n\r\nGENERACION CLASE XAMARIN DTO\r\n\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"Xamarin_dto\");\r\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\t\twriter = new StreamWriter(serverPath + @\"Xamarin_dto\\\" + table.tableNameClassName + \"Dto.cs\");\r\n%\u003e\r\nusing \u003c%=templateProject.namespaceBase%\u003e.dto.codegen;\r\nusing System;\r\nusing System.Collections.Generic;\r\n\r\nnamespace \u003c%=templateProject.namespaceBase%\u003e.dto\r\n{\r\n    public class \u003c%=table.tableNameClassName%\u003eDto : _\u003c%=table.tableNameClassName%\u003eDto\r\n    {\r\n\r\n    }\r\n}\r\n\u003c%\r\n\t\twriter.Flush();\r\n\t\twriter.Close();\r\n\t\twriter.Dispose();\r\n\t}\r\n}\r\n\r\n\r\n/*\r\n\r\nGENERACION CLASE MAPPER CODEGEN\r\n\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"mapping\");\r\nwriter = new StreamWriter(serverPath + @\"mapping\\codegen.cs\");\r\n\t\r\n%\u003e\r\nusing FluentNHibernate.Mapping;\r\nusing \u003c%=templateProject.namespaceBase%\u003e.domain;\r\n\r\nnamespace \u003c%=templateProject.namespaceBase%\u003e.mapping.codegen\r\n{\r\n\u003c%\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n%\u003e\r\n    public class _Map\u003c%=table.tableNameClassName%\u003e : ClassMap\u003c\u003c%=table.tableNameClassName%\u003e\u003e\r\n    {\r\n        public _Map\u003c%=table.tableNameClassName%\u003e()\r\n        {\r\n        \tTable(\"\u003c%=table.tableNameClassName.ToLower()%\u003e\");\r\n        \t\r\n\u003c%\t\t\t\r\n\t\tforeach(Columns column in table.columns())\r\n\t\t{\r\n\t\t\tif(column.isPrimary==true)\r\n\t\t\t{\r\n\t\t\t\tif(column.extra==\"auto_increment\"|| column.AutoIncrement){\r\n\t\t%\u003e\t\t\tId(c =\u003e c.\u003c%=column.getColumnNameUpper()%\u003e).GeneratedBy.Identity();\u003c%\r\n\t\t\t\t}else{\r\n\t\t%\u003e\t\t\tId(c =\u003e c.\u003c%=column.getColumnNameUpper()%\u003e).GeneratedBy.Assigned();\u003c%\t\t\t\t\r\n\t\t\t}}\r\n\t\t\telse\r\n\t\t\t{%\u003e\r\n\t\t\tMap(c =\u003e c.\u003c%=column.getColumnNameUpper()%\u003e)\u003c%=(column.CSharpType.FullName!=\"System.String\"?\"\":\".Length(\" + (column.maximunLength==-1?int.MaxValue:column.maximunLength) +\")\")%\u003e;\r\n\u003c%\t\t\t}\r\n\t\t}%\u003e\r\n\t\t}\r\n    }\r\n\u003c%\r\n\r\n\t}\r\n}\r\n%\u003e\r\n}\r\n\u003c%\r\n\r\nwriter.Flush();\r\nwriter.Close();\r\nwriter.Dispose();\r\n\r\n\r\n/*\r\n\r\nGENERACION CLASE MAPPER\r\n\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"mapping\");\r\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\t\twriter = new StreamWriter(serverPath + @\"mapping\\Map\" + table.tableNameClassName + \".cs\");\r\n%\u003e\r\nusing FluentNHibernate.Mapping;\r\nusing \u003c%=templateProject.namespaceBase%\u003e.domain;\r\nusing \u003c%=templateProject.namespaceBase%\u003e.mapping.codegen;\r\n\r\nnamespace \u003c%=templateProject.namespaceBase%\u003e.mapping\r\n{\r\n    public class Map\u003c%=table.tableNameClassName%\u003e : _Map\u003c%=table.tableNameClassName%\u003e\r\n    {\r\n        public Map\u003c%=table.tableNameClassName%\u003e():base()\r\n        {\r\n        }\r\n    }\r\n}\r\n\u003c%\r\n\t\twriter.Flush();\r\n\t\twriter.Close();\r\n\t\twriter.Dispose();\r\n\t}\r\n}\r\n\r\n\r\n/*\r\n\r\nGENERACION CLASE MAPPER CODEGEN\r\n\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"mapping\");\r\nwriter = new StreamWriter(serverPath + @\"mapping\\sessionMAP.txt\");\r\n\t\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n%\u003eType.GetType(\"\u003c%=templateProject.namespaceBase%\u003e.mapping.Map\u003c%=table.tableNameClassName%\u003e, AlladioDataService\"),\r\n\u003c%\r\n\r\n\t}\r\n}\r\n\r\n\r\nwriter.Flush();\r\nwriter.Close();\r\nwriter.Dispose();\r\n\r\n\r\n\r\n\r\n/*\r\n\r\nGENERACION CLASE SERVICE\r\n\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"service\");\r\n\r\nwriter = new StreamWriter(serverPath + @\"service\\codegen.cs\");\r\n%\u003e\r\nusing \u003c%=templateProject.namespaceBase%\u003e.domain;\r\nusing GQService.com.gq.service;\r\nusing NHibernate;\r\n\r\nnamespace \u003c%=templateProject.namespaceBase%\u003e.service.codegen\r\n{\r\n\r\n\u003c%\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\t\r\n\t\tColumns primaryColumn=null;\r\n\t\tbool hasBorrar=false;\r\n\t\t\r\n\t\tforeach(Columns column in table.columns())\r\n\t\t{\r\n\t\t\tif(column.isPrimary==true)\r\n\t\t\t{\r\n\t\t\t\tprimaryColumn = column;\r\n\t\t\t}\r\n\t\t\tif(column.getColumnNameUpper().Equals(\"Borrado\"))\r\n\t\t\t{\r\n\t\t\t\thasBorrar=true;\r\n\t\t\t}\r\n\t\t}\r\n%\u003e\r\n\tpublic class _Serv\u003c%=table.tableNameClassName%\u003e : GenericService\u003c\u003c%=table.tableNameClassName%\u003e\u003e\r\n    {\r\n    \t#region Constructores\r\n\r\n        public _Serv\u003c%=table.tableNameClassName%\u003e(ISession session): base(session){}\r\n        public _Serv\u003c%=table.tableNameClassName%\u003e(IStatelessSession statelessSession): base(statelessSession){}\r\n        public _Serv\u003c%=table.tableNameClassName%\u003e(ISession session, IStatelessSession statelessSession): base(session,statelessSession){}\r\n\r\n        #endregion\r\n             \r\n\u003c%\r\n\t\tif(hasBorrar)\r\n\t\t{\r\n%\u003e   \r\n        public override bool Borrar(\u003c%=table.tableNameClassName%\u003e pObj)\r\n        {\r\n            pObj.Borrado = \"1\";\r\n            return base.Actualizar (pObj) != null;\r\n        }\r\n\u003c%\t\r\n\t\t}\r\n%\u003e\r\n    }\r\n\u003c%\r\n\t}\r\n}\r\n%\u003e\r\n}\r\n\u003c%\r\nwriter.Flush();\r\nwriter.Close();\r\nwriter.Dispose();\r\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\t\twriter = new StreamWriter(serverPath + @\"service\\Serv\" + table.tableNameClassName + \".cs\");\r\n\t\tColumns primaryColumn=null;\r\n\t\tforeach(Columns column in table.columns())\r\n\t\t{\r\n\t\t\tif(column.isPrimary==true)\r\n\t\t\t{\r\n\t\t\t\tprimaryColumn = column;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n%\u003e\r\nusing \u003c%=templateProject.namespaceBase%\u003e.service.codegen;\r\nusing NHibernate;\r\n\r\nnamespace \u003c%=templateProject.namespaceBase%\u003e.service\r\n{\r\n    public class Serv\u003c%=table.tableNameClassName%\u003e : _Serv\u003c%=table.tableNameClassName%\u003e\r\n    {\r\n    \t#region Constructores\r\n\r\n        public Serv\u003c%=table.tableNameClassName%\u003e(ISession session): base(session){}\r\n        public Serv\u003c%=table.tableNameClassName%\u003e(IStatelessSession statelessSession): base(statelessSession){}\r\n        public Serv\u003c%=table.tableNameClassName%\u003e(ISession session, IStatelessSession statelessSession): base(session,statelessSession){}\r\n\r\n        #endregion\r\n    }\r\n}\r\n\u003c%\r\n\t\twriter.Flush();\r\n\t\twriter.Close();\r\n\t\twriter.Dispose();\r\n\t}\r\n}\r\n\r\n/*\r\n\r\nGENERACION CLASE ANDROID\r\n\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath +  @\"android\");\r\nUtil.MakeDirectory(serverPath +  @\"android\\codegen\");\r\n\r\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\t\twriter = new StreamWriter(serverPath + @\"android\\codegen\\_\" + table.tableNameClassName + \".java\");\r\n%\u003e\r\npackage \u003c%=templateProject.namespaceBase%\u003e.next.data.codegen;\r\n\r\nimport com.alladio.next.data.IDto;\r\nimport com.alladio.next.utils.AlladioUtils;\r\nimport java.util.Date;\r\nimport android.database.Cursor;\r\nimport java.util.LinkedHashMap;\r\nimport java.math.BigDecimal;\r\n\r\npublic class _\u003c%=table.tableNameClassName%\u003e implements IDto {\r\n\r\n\tpublic String getClassName(){return \"\u003c%=templateProject.namespaceBase%\u003e.dto.\u003c%=table.tableNameClassName%\u003eDto\";}\r\n\u003c%\r\n\t\tforeach(Columns column in table.columns())\r\n\t\t{\r\n\t\t\t\r\n\t\t\tif(column.getJavaType().Equals(\"ulong\")==true){\r\n%\u003e\t\r\n\tprivate long \u003c%=column.getColumnNameUpper()%\u003e;\r\n\tpublic long get\u003c%=column.getColumnNameUpper()%\u003e(){return \u003c%=column.getColumnNameUpper()%\u003e;}\r\n\tpublic void set\u003c%=column.getColumnNameUpper()%\u003e(long \u003c%=column.getColumnNameUpper()%\u003e){this.\u003c%=column.getColumnNameUpper()%\u003e = \u003c%=column.getColumnNameUpper()%\u003e;}\r\n\u003c%\t\t\t}\r\n\t\t\telse if(column.getJavaType().Equals(\"byte\")==true){\r\n%\u003e\t\r\n\tprivate int \u003c%=column.getColumnNameUpper()%\u003e;\r\n\tpublic int get\u003c%=column.getColumnNameUpper()%\u003e(){return \u003c%=column.getColumnNameUpper()%\u003e;}\r\n\tpublic void set\u003c%=column.getColumnNameUpper()%\u003e(int \u003c%=column.getColumnNameUpper()%\u003e){this.\u003c%=column.getColumnNameUpper()%\u003e = \u003c%=column.getColumnNameUpper()%\u003e;}\r\n\u003c%\t\t\t}\r\n\t\t\telse{\r\n%\u003e\t\r\n\tprivate \u003c%=column.getJavaType()%\u003e \u003c%=column.getColumnNameUpper()%\u003e;\r\n\tpublic \u003c%=column.getJavaType()%\u003e get\u003c%=column.getColumnNameUpper()%\u003e(){return \u003c%=column.getColumnNameUpper()%\u003e;}\r\n\tpublic void set\u003c%=column.getColumnNameUpper()%\u003e(\u003c%=column.getJavaType()%\u003e \u003c%=column.getColumnNameUpper()%\u003e){this.\u003c%=column.getColumnNameUpper()%\u003e = \u003c%=column.getColumnNameUpper()%\u003e;}\r\n\u003c%\t\t\t}\r\n\t\t}\r\n%\u003e\r\n\tpublic void setToCursor(Cursor cursor){\r\n\u003c%\r\n\t\tforeach(Columns column in table.columns())\r\n\t\t{\r\n\t\t\tif(column.getJavaType().Equals(\"ulong\")==true){\r\n%\u003e\t\r\n\t\t\u003c%=column.getColumnNameUpper()%\u003e = cursor.getLong(cursor.getColumnIndex(\"\u003c%=column.getColumnNameUpper()%\u003e\"));\r\n\u003c%\r\n\t\t\t}\r\n\t\t\telse if(column.getJavaType().Equals(\"byte\")==true){\r\n%\u003e\t\r\n\t\t\u003c%=column.getColumnNameUpper()%\u003e = cursor.getInt(cursor.getColumnIndex(\"\u003c%=column.getColumnNameUpper()%\u003e\"));\r\n\u003c%\r\n\t\t\t}\r\n\t\t\telse if(column.getJavaType().Equals(\"BigDecimal\")==true){\r\n%\u003e\t\r\n\t\t\u003c%=column.getColumnNameUpper()%\u003e = BigDecimal.valueOf(cursor.getDouble(cursor.getColumnIndex(\"\u003c%=column.getColumnNameUpper()%\u003e\")));\r\n\u003c%\r\n\t\t\t}\r\n\t\t\telse if(column.getJavaType().Equals(\"Date\")==true){\r\n%\u003e\t\r\n\t\t\u003c%=column.getColumnNameUpper()%\u003e = new Date(cursor.getLong(cursor.getColumnIndex(\"\u003c%=column.getColumnNameUpper()%\u003e\")));\r\n\u003c%\r\n\t\t\t}else if(column.getJavaType().Equals(\"ulong\")==true){\r\n%\u003e\t\r\n\t\t\u003c%=column.getColumnNameUpper()%\u003e = new Date(cursor.getLong(cursor.getColumnIndex(\"\u003c%=column.getColumnNameUpper()%\u003e\")));\r\n\u003c%\r\n\t\t\t}\r\n\t\t\telse{\r\n%\u003e\t\r\n\t\t\u003c%=column.getColumnNameUpper()%\u003e = cursor.get\u003c%= column.getJavaType().Substring(0,1).ToUpper() + column.getJavaType().Substring(1,column.getJavaType().Length-1) %\u003e(cursor.getColumnIndex(\"\u003c%=column.getColumnNameUpper()%\u003e\"));\r\n\u003c%\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n%\u003e\t\t\r\n\t}\r\n\t\r\n\tpublic void setToHashmap(LinkedHashMap\u003cString, Object\u003e data)\r\n\t{\r\n\u003c%\r\n\t\tforeach(Columns column in table.columns())\r\n\t\t{\r\n\t\t\tif(column.getJavaType().Equals(\"ulong\")==true){\r\n%\u003e\t\r\n\t\t\u003c%=column.getColumnNameUpper()%\u003e = Long.valueOf(AlladioUtils.getValue(data.get(\"\u003c%=column.getColumnNameUpper()%\u003e\"), \"0\"));\r\n\u003c%\r\n\t\t\t}\r\n\t\t\telse if(column.getJavaType().Equals(\"Date\")==true){\r\n%\u003e\t\r\n\t\t\u003c%=column.getColumnNameUpper()%\u003e = new Date(Long.parseLong(data.get(\"\u003c%=column.getColumnNameUpper()%\u003e\").toString().replaceAll(\"/Date\",\"\").replaceAll(\"/\",\"\").replace(\u0027(\u0027, \u0027 \u0027).replace(\u0027)\u0027, \u0027 \u0027).replaceAll(\" \",\"\")));\r\n\u003c%\r\n\t\t\t}\r\n\t\t\telse if(column.getJavaType().Equals(\"String\")==true){\r\n%\u003e\t\r\n\t\t\u003c%=column.getColumnNameUpper()%\u003e = (\u003c%=column.getJavaType()%\u003e) data.get(\"\u003c%=column.getColumnNameUpper()%\u003e\");\r\n\u003c%\t\t\t\r\n\t\t\t}\r\n\t\t\telse if(column.getJavaType().Equals(\"int\")==true || \r\n\t\t\t\tcolumn.getJavaType().Equals(\"byte\")==true){\r\n%\u003e\t\r\n\t\t\u003c%=column.getColumnNameUpper()%\u003e = Integer.valueOf(AlladioUtils.getValue(data.get(\"\u003c%=column.getColumnNameUpper()%\u003e\"), \"0\"));\r\n\u003c%\t\t\t\r\n\t\t\t}\r\n\t\t\telse if(column.getJavaType().Equals(\"BigDecimal\")==true){\r\n%\u003e\t\r\n\t\t\u003c%=column.getColumnNameUpper()%\u003e = BigDecimal.valueOf(Double.valueOf(AlladioUtils.getValue(data.get(\"\u003c%=column.getColumnNameUpper()%\u003e\"), \"0\")));\r\n\u003c%\t\t\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n%\u003e\t\r\n\t\t\u003c%=column.getColumnNameUpper()%\u003e = \u003c%= column.getJavaType().Substring(0,1).ToUpper() + column.getJavaType().Substring(1,column.getJavaType().Length-1) %\u003e.valueOf(AlladioUtils.getValue(data.get(\"\u003c%=column.getColumnNameUpper()%\u003e\"), \"0\"));\r\n\u003c%\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n%\u003e\t\t\r\n\t}\t\t\r\n}\r\n\u003c%\t\r\n\twriter.Flush();\r\n\twriter.Close();\r\n\twriter.Dispose();\r\n\t}\r\n}\r\n\r\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\t\twriter = new StreamWriter(serverPath + @\"android\\\" + table.tableNameClassName + \".java\");\r\n%\u003e\r\npackage \u003c%=templateProject.namespaceBase%\u003e.next.data;\r\n\r\nimport  \u003c%=templateProject.namespaceBase%\u003e.next.data.codegen.*;\r\n\r\npublic class \u003c%=table.tableNameClassName%\u003e extends _\u003c%=table.tableNameClassName%\u003e {\r\n\r\n}\r\n\u003c%\t\r\n\twriter.Flush();\r\n\twriter.Close();\r\n\twriter.Dispose();\r\n\t}\r\n}\r\n\r\n\r\nSystem.Diagnostics.Process.Start(serverPath);\r\n\r\n%\u003e","templateClass":"\r\nusing System;\r\nusing System.IO;\r\nusing System.Collections;\r\nusing com.beastsoft.templates;\r\n\r\nusing System.Windows.Forms;\r\n\r\n\r\n    public class RenderClass\r\n    {\r\n        private TemplateProject templateProject;\r\n\r\n    #line 1\n\r\npublic class Util\r\n{\r\n\tpublic static void MakeDirectory(string path)\r\n\t{\r\n\t\ttry\r\n\t\t{\r\n\t\t\tif(!Directory.Exists(path))\r\n                Directory.CreateDirectory(path);\r\n       \t}\r\n       \tcatch(Exception ex){}\r\n\t}\r\n}\r\n\r\n        \r\n        public void Render(TemplateProject templateProject)\r\n        {\r\n            this.templateProject = templateProject;\r\n\n#line 2\n\r\nstring clientPath = templateProject.directoryPath + @\"client\\\"+ templateProject.namespaceBase.Replace(\".\", @\"\\\")+@\"\\\";\r\nstring serverPath = templateProject.directoryPath + templateProject.namespaceBase.Replace(\".\", @\"\\\")+@\"\\\";\r\n\r\nStreamWriter writer = null;\r\n/*\r\n\r\nGENERACION CLASE DOMAIN CODEGEN\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"domain\");\r\nwriter = new StreamWriter(serverPath + @\"domain\\codegen.cs\");\r\n\r\n\r\n\t\t\r\n\n#line 3\n\r\n            writer.Write(\"using GQService.com.gq.dto;\\r\\nusing System;\\r\\n\\r\\nnamespace \");\r\n\n#line 4\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 5\n\r\n            writer.Write(\".domain.codegen\\r\\n{\\r\\n\");\r\n\n#line 6\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\n#line 7\n\r\n            writer.Write(\"\\r\\n    public class _\");\r\n\n#line 8\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 9\n\r\n            writer.Write(\" : IEntity\\r\\n    {\\r\\n\");\r\n\n#line 10\n\t\t\t\r\n\t\tforeach(Columns column in table.columns())\r\n\t\t{\r\n\n#line 11\n\r\n            writer.Write(\"\\r\\n        public virtual \");\r\n\n#line 12\n\r\n            writer.Write(column.CSharpType.FullName);\r\n\n#line 13\n\r\n            writer.Write(((column.isPrimary==true||column.isNullable) \u0026\u0026 (column.CSharpType.FullName!=\"System.String\" \u0026\u0026 column.CSharpType.FullName!=\"System.Byte[]\"))?\"?\":\"\");\r\n\n#line 14\n\r\n            writer.Write(\" \");\r\n\n#line 15\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 16\n\r\n            writer.Write(\" { get; set; }\\r\\n\\r\\n\");\r\n\n#line 17\n\r\n\t\t}\n#line 18\n\r\n            writer.Write(\"\\r\\n    }\\r\\n\");\r\n\n#line 19\n\r\n\t\t\r\n\t}\r\n}\r\n\n#line 20\n\r\n            writer.Write(\"\\r\\n}\\r\\n\");\r\n\n#line 21\n\r\nwriter.Flush();\r\nwriter.Close();\r\nwriter.Dispose();\r\n\r\n/*\r\n\r\nGENERACION CLASE DOMAIN\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"domain\");\r\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\t\twriter = new StreamWriter(serverPath + @\"domain\\\" + table.tableNameClassName + \".cs\");\r\n\n#line 22\n\r\n            writer.Write(\"\\r\\nusing \");\r\n\n#line 23\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 24\n\r\n            writer.Write(\".domain.codegen;\\r\\nusing System;\\r\\n\\r\\nnamespace \");\r\n\n#line 25\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 26\n\r\n            writer.Write(\".domain\\r\\n{\\r\\n    public class \");\r\n\n#line 27\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 28\n\r\n            writer.Write(\":_\");\r\n\n#line 29\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 30\n\r\n            writer.Write(\"\\r\\n    {\\r\\n    }\\r\\n}\\r\\n\");\r\n\n#line 31\n\r\n\t\twriter.Flush();\r\n\t\twriter.Close();\r\n\t\twriter.Dispose();\r\n\t}\r\n}\r\n\r\n\r\n/*\r\n\r\nGENERACION CLASE JS DTO\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"JSDTO\");\r\nwriter = new StreamWriter(serverPath + @\"JSDTO\\dto.js\");\r\n\n#line 32\n\r\n            writer.Write(\"\\r\\nFunction.prototype.extends = function (parent) {\\r\\n    this.prototype = Object.create(parent.prototype);\\r\\n};\\r\\n\");\r\n\n#line 33\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\n#line 34\n\r\n            writer.Write(\"\\r\\n\\r\\nvar _\");\r\n\n#line 35\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 36\n\r\n            writer.Write(\"Dto = function (value) {\\r\\n\t\\r\\n\tvalue = (value==null||value===undefined)?{}:value;\\r\\n\t\\r\\n\tif(isArray(value))\\r\\n    {\\r\\n        var result = value;\\r\\n\\r\\n        for (var i = 0; i \u003c result.length; i++) {\\r\\n        \tresult[i].selfData = undefined;\\r\\n            result[i] = new \");\r\n\n#line 37\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 38\n\r\n            writer.Write(\"Dto(result[i]);\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n    \\r\\n    value.selfData = undefined;\\r\\n    \\r\\n    var self = this;\\r\\n\\r\\n\tself.selfData = value;\\r\\n\t\\r\\n    self.className = \\\"\");\r\n\n#line 39\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 40\n\r\n            writer.Write(\".dto.\");\r\n\n#line 41\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 42\n\r\n            writer.Write(\"Dto\\\";\\r\\n\");\r\n\n#line 43\n\t\t\t\r\n\t\tforeach(Columns column in table.columns())\r\n\t\t{\r\n\n#line 44\n\r\n            writer.Write(\"\\r\\n    self.\");\r\n\n#line 45\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 46\n\r\n            writer.Write(\"=value.\");\r\n\n#line 47\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 48\n\r\n            writer.Write(\"===undefined?\");\r\n\n#line 49\n\r\n            writer.Write((((column.isPrimary==true||column.isNullable) \u0026\u0026 column.CSharpType.FullName!=\"System.String\")?\" null \":(column.CSharpType.FullName==\"System.String\"?\" \\\"\\\" \":(column.CSharpType.FullName==\"System.DateTime\"?\" new Date() \":\" 0 \"))) );\r\n\n#line 50\n\r\n            writer.Write(\":value.\");\r\n\n#line 51\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 52\n\r\n            writer.Write(\";\\r\\n\");\r\n\n#line 53\n\t\t}\n#line 54\n\r\n            writer.Write(\"\\r\\n};\\r\\n\");\r\n\n#line 55\n\r\n\t\t\r\n\t}\r\n}\r\nwriter.Flush();\r\nwriter.Close();\r\nwriter.Dispose();\r\n\r\n\r\n/*\r\n\r\nGENERACION CLASE JS DTO\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"JSDTO\");\r\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\t\twriter = new StreamWriter(serverPath + @\"JSDTO\\\" + table.tableNameClassName + \"Dto.js\");\r\n\n#line 56\n\r\n            writer.Write(\"\\r\\nvar \");\r\n\n#line 57\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 58\n\r\n            writer.Write(\"Dto = function(value) {\\r\\n    var self = this;\\r\\n\\r\\n    var data = _\");\r\n\n#line 59\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 60\n\r\n            writer.Write(\"Dto.apply(self, arguments);\\r\\n    if (isArray(data)) {\\r\\n        return data;\\r\\n    }\\r\\n\tvalue = (value==null||value===undefined)?{}:value;\\r\\n}\\r\\n\\r\\n\");\r\n\n#line 61\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 62\n\r\n            writer.Write(\"Dto.extends(_\");\r\n\n#line 63\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 64\n\r\n            writer.Write(\"Dto);\\r\\n\");\r\n\n#line 65\n\r\n\t\twriter.Flush();\r\n\t\twriter.Close();\r\n\t\twriter.Dispose();\r\n\t}\r\n}\r\n\r\n\r\n/*\r\n\r\nGENERACION CLASE DTO CODEGEN\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"dto\");\r\n\r\nwriter = new StreamWriter(serverPath + @\"dto\\codegen.cs\");\r\n\r\n\n#line 66\n\r\n            writer.Write(\"\\r\\nusing \");\r\n\n#line 67\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 68\n\r\n            writer.Write(\".domain;\\r\\nusing System;\\r\\nusing System.Collections.Generic;\\r\\nusing GQService.com.gq.dto;\\r\\n\\r\\nnamespace \");\r\n\n#line 69\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 70\n\r\n            writer.Write(\".dto.codegen\\r\\n{\\r\\n\");\r\n\n#line 71\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\n#line 72\n\r\n            writer.Write(\"\\r\\n\\r\\n    public class _\");\r\n\n#line 73\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 74\n\r\n            writer.Write(\"Dto : Dto\u003c\");\r\n\n#line 75\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 76\n\r\n            writer.Write(\",\");\r\n\n#line 77\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 78\n\r\n            writer.Write(\"Dto\u003e\\r\\n    {\\r\\n    \tpublic _\");\r\n\n#line 79\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 80\n\r\n            writer.Write(\"Dto() : base()\\r\\n    \t{\\r\\n    \t}\\r\\n    \t\\r\\n    \tpublic _\");\r\n\n#line 81\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 82\n\r\n            writer.Write(\"Dto( \");\r\n\n#line 83\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 84\n\r\n            writer.Write(\" value) : base(value)\\r\\n    \t{\\r\\n    \t}\\r\\n\");\r\n\n#line 85\n\t\t\t\r\n\t\tforeach(Columns column in table.columns())\r\n\t\t{\r\n\n#line 86\n\r\n            writer.Write(\"\\r\\n        public virtual \");\r\n\n#line 87\n\r\n            writer.Write(column.CSharpType.FullName);\r\n\n#line 88\n\r\n            writer.Write(((column.isPrimary==true||column.isNullable) \u0026\u0026 (column.CSharpType.FullName!=\"System.String\" \u0026\u0026 column.CSharpType.FullName!=\"System.Byte[]\"))?\"?\":\"\");\r\n\n#line 89\n\r\n            writer.Write(\" \");\r\n\n#line 90\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 91\n\r\n            writer.Write(\" { get; set; }\\r\\n\\r\\n\");\r\n\n#line 92\n\r\n\t\t}\n#line 93\n\r\n            writer.Write(\"\\r\\n    }\\r\\n\");\r\n\n#line 94\n\r\n\t}\r\n}\r\n\n#line 95\n\r\n            writer.Write(\"\\r\\n}\\r\\n\");\r\n\n#line 96\n\r\nwriter.Flush();\r\nwriter.Close();\r\nwriter.Dispose();\r\n\r\n/*\r\n\r\nGENERACION CLASE DTO\r\n\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"dto\");\r\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\t\twriter = new StreamWriter(serverPath + @\"dto\\\" + table.tableNameClassName + \"Dto.cs\");\r\n\n#line 97\n\r\n            writer.Write(\"\\r\\nusing \");\r\n\n#line 98\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 99\n\r\n            writer.Write(\".domain;\\r\\nusing \");\r\n\n#line 100\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 101\n\r\n            writer.Write(\".dto.codegen;\\r\\nusing System;\\r\\nusing System.Collections.Generic;\\r\\n\\r\\nnamespace \");\r\n\n#line 102\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 103\n\r\n            writer.Write(\".dto\\r\\n{\\r\\n    public class \");\r\n\n#line 104\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 105\n\r\n            writer.Write(\"Dto : _\");\r\n\n#line 106\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 107\n\r\n            writer.Write(\"Dto\\r\\n    {\\r\\n        public \");\r\n\n#line 108\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 109\n\r\n            writer.Write(\"Dto():base()\\r\\n        {\\r\\n        }\\r\\n       \\r\\n        public \");\r\n\n#line 110\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 111\n\r\n            writer.Write(\"Dto(\");\r\n\n#line 112\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 113\n\r\n            writer.Write(\" value):base(value)\\r\\n        {\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\");\r\n\n#line 114\n\r\n\t\twriter.Flush();\r\n\t\twriter.Close();\r\n\t\twriter.Dispose();\r\n\t}\r\n}\r\n\r\n/*\r\n\r\nGENERACION CLASE XAMARIN\r\n\r\n\r\n*/\r\n/*\r\n\r\nGENERACION CLASE XAMARIN DTO CODEGEN\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"Xamarin_dto\");\r\n\r\nwriter = new StreamWriter(serverPath + @\"Xamarin_dto\\codegen.cs\");\r\n\r\n\n#line 115\n\r\n            writer.Write(\"\\r\\nusing System;\\r\\nusing System.Collections.Generic;\\r\\n\\r\\nnamespace \");\r\n\n#line 116\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 117\n\r\n            writer.Write(\".dto.codegen\\r\\n{\\r\\n\");\r\n\n#line 118\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\n#line 119\n\r\n            writer.Write(\"\\r\\n\\r\\n    public class _\");\r\n\n#line 120\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 121\n\r\n            writer.Write(\"Dto\\r\\n    {\\r\\n\");\r\n\n#line 122\n\t\t\t\r\n\t\tforeach(Columns column in table.columns())\r\n\t\t{\r\n\n#line 123\n\r\n            writer.Write(\"\\r\\n        public virtual \");\r\n\n#line 124\n\r\n            writer.Write(column.CSharpType.FullName);\r\n\n#line 125\n\r\n            writer.Write(((column.isPrimary==true||column.isNullable) \u0026\u0026 (column.CSharpType.FullName!=\"System.String\" \u0026\u0026 column.CSharpType.FullName!=\"System.Byte[]\"))?\"?\":\"\");\r\n\n#line 126\n\r\n            writer.Write(\" \");\r\n\n#line 127\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 128\n\r\n            writer.Write(\" { get; set; }\\r\\n\\r\\n\");\r\n\n#line 129\n\r\n\t\t}\n#line 130\n\r\n            writer.Write(\"\\r\\n    }\\r\\n\");\r\n\n#line 131\n\r\n\t}\r\n}\r\n\n#line 132\n\r\n            writer.Write(\"\\r\\n}\\r\\n\");\r\n\n#line 133\n\r\nwriter.Flush();\r\nwriter.Close();\r\nwriter.Dispose();\r\n\r\n/*\r\n\r\nGENERACION CLASE XAMARIN DTO\r\n\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"Xamarin_dto\");\r\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\t\twriter = new StreamWriter(serverPath + @\"Xamarin_dto\\\" + table.tableNameClassName + \"Dto.cs\");\r\n\n#line 134\n\r\n            writer.Write(\"\\r\\nusing \");\r\n\n#line 135\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 136\n\r\n            writer.Write(\".dto.codegen;\\r\\nusing System;\\r\\nusing System.Collections.Generic;\\r\\n\\r\\nnamespace \");\r\n\n#line 137\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 138\n\r\n            writer.Write(\".dto\\r\\n{\\r\\n    public class \");\r\n\n#line 139\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 140\n\r\n            writer.Write(\"Dto : _\");\r\n\n#line 141\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 142\n\r\n            writer.Write(\"Dto\\r\\n    {\\r\\n\\r\\n    }\\r\\n}\\r\\n\");\r\n\n#line 143\n\r\n\t\twriter.Flush();\r\n\t\twriter.Close();\r\n\t\twriter.Dispose();\r\n\t}\r\n}\r\n\r\n\r\n/*\r\n\r\nGENERACION CLASE MAPPER CODEGEN\r\n\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"mapping\");\r\nwriter = new StreamWriter(serverPath + @\"mapping\\codegen.cs\");\r\n\t\r\n\n#line 144\n\r\n            writer.Write(\"\\r\\nusing FluentNHibernate.Mapping;\\r\\nusing \");\r\n\n#line 145\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 146\n\r\n            writer.Write(\".domain;\\r\\n\\r\\nnamespace \");\r\n\n#line 147\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 148\n\r\n            writer.Write(\".mapping.codegen\\r\\n{\\r\\n\");\r\n\n#line 149\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\n#line 150\n\r\n            writer.Write(\"\\r\\n    public class _Map\");\r\n\n#line 151\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 152\n\r\n            writer.Write(\" : ClassMap\u003c\");\r\n\n#line 153\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 154\n\r\n            writer.Write(\"\u003e\\r\\n    {\\r\\n        public _Map\");\r\n\n#line 155\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 156\n\r\n            writer.Write(\"()\\r\\n        {\\r\\n        \tTable(\\\"\");\r\n\n#line 157\n\r\n            writer.Write(table.tableNameClassName.ToLower());\r\n\n#line 158\n\r\n            writer.Write(\"\\\");\\r\\n        \t\\r\\n\");\r\n\n#line 159\n\t\t\t\r\n\t\tforeach(Columns column in table.columns())\r\n\t\t{\r\n\t\t\tif(column.isPrimary==true)\r\n\t\t\t{\r\n\t\t\t\tif(column.extra==\"auto_increment\"|| column.AutoIncrement){\r\n\t\t\n#line 160\n\r\n            writer.Write(\"\t\t\tId(c =\u003e c.\");\r\n\n#line 161\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 162\n\r\n            writer.Write(\").GeneratedBy.Identity();\");\r\n\n#line 163\n\r\n\t\t\t\t}else{\r\n\t\t\n#line 164\n\r\n            writer.Write(\"\t\t\tId(c =\u003e c.\");\r\n\n#line 165\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 166\n\r\n            writer.Write(\").GeneratedBy.Assigned();\");\r\n\n#line 167\n\t\t\t\t\r\n\t\t\t}}\r\n\t\t\telse\r\n\t\t\t{\n#line 168\n\r\n            writer.Write(\"\\r\\n\t\t\tMap(c =\u003e c.\");\r\n\n#line 169\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 170\n\r\n            writer.Write(\")\");\r\n\n#line 171\n\r\n            writer.Write((column.CSharpType.FullName!=\"System.String\"?\"\":\".Length(\" + (column.maximunLength==-1?int.MaxValue:column.maximunLength) +\")\"));\r\n\n#line 172\n\r\n            writer.Write(\";\\r\\n\");\r\n\n#line 173\n\t\t\t}\r\n\t\t}\n#line 174\n\r\n            writer.Write(\"\\r\\n\t\t}\\r\\n    }\\r\\n\");\r\n\n#line 175\n\r\n\r\n\t}\r\n}\r\n\n#line 176\n\r\n            writer.Write(\"\\r\\n}\\r\\n\");\r\n\n#line 177\n\r\n\r\nwriter.Flush();\r\nwriter.Close();\r\nwriter.Dispose();\r\n\r\n\r\n/*\r\n\r\nGENERACION CLASE MAPPER\r\n\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"mapping\");\r\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\t\twriter = new StreamWriter(serverPath + @\"mapping\\Map\" + table.tableNameClassName + \".cs\");\r\n\n#line 178\n\r\n            writer.Write(\"\\r\\nusing FluentNHibernate.Mapping;\\r\\nusing \");\r\n\n#line 179\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 180\n\r\n            writer.Write(\".domain;\\r\\nusing \");\r\n\n#line 181\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 182\n\r\n            writer.Write(\".mapping.codegen;\\r\\n\\r\\nnamespace \");\r\n\n#line 183\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 184\n\r\n            writer.Write(\".mapping\\r\\n{\\r\\n    public class Map\");\r\n\n#line 185\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 186\n\r\n            writer.Write(\" : _Map\");\r\n\n#line 187\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 188\n\r\n            writer.Write(\"\\r\\n    {\\r\\n        public Map\");\r\n\n#line 189\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 190\n\r\n            writer.Write(\"():base()\\r\\n        {\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\");\r\n\n#line 191\n\r\n\t\twriter.Flush();\r\n\t\twriter.Close();\r\n\t\twriter.Dispose();\r\n\t}\r\n}\r\n\r\n\r\n/*\r\n\r\nGENERACION CLASE MAPPER CODEGEN\r\n\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"mapping\");\r\nwriter = new StreamWriter(serverPath + @\"mapping\\sessionMAP.txt\");\r\n\t\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\n#line 192\n\r\n            writer.Write(\"Type.GetType(\\\"\");\r\n\n#line 193\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 194\n\r\n            writer.Write(\".mapping.Map\");\r\n\n#line 195\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 196\n\r\n            writer.Write(\", AlladioDataService\\\"),\\r\\n\");\r\n\n#line 197\n\r\n\r\n\t}\r\n}\r\n\r\n\r\nwriter.Flush();\r\nwriter.Close();\r\nwriter.Dispose();\r\n\r\n\r\n\r\n\r\n/*\r\n\r\nGENERACION CLASE SERVICE\r\n\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath+\"service\");\r\n\r\nwriter = new StreamWriter(serverPath + @\"service\\codegen.cs\");\r\n\n#line 198\n\r\n            writer.Write(\"\\r\\nusing \");\r\n\n#line 199\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 200\n\r\n            writer.Write(\".domain;\\r\\nusing GQService.com.gq.service;\\r\\nusing NHibernate;\\r\\n\\r\\nnamespace \");\r\n\n#line 201\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 202\n\r\n            writer.Write(\".service.codegen\\r\\n{\\r\\n\\r\\n\");\r\n\n#line 203\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\t\r\n\t\tColumns primaryColumn=null;\r\n\t\tbool hasBorrar=false;\r\n\t\t\r\n\t\tforeach(Columns column in table.columns())\r\n\t\t{\r\n\t\t\tif(column.isPrimary==true)\r\n\t\t\t{\r\n\t\t\t\tprimaryColumn = column;\r\n\t\t\t}\r\n\t\t\tif(column.getColumnNameUpper().Equals(\"Borrado\"))\r\n\t\t\t{\r\n\t\t\t\thasBorrar=true;\r\n\t\t\t}\r\n\t\t}\r\n\n#line 204\n\r\n            writer.Write(\"\\r\\n\tpublic class _Serv\");\r\n\n#line 205\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 206\n\r\n            writer.Write(\" : GenericService\u003c\");\r\n\n#line 207\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 208\n\r\n            writer.Write(\"\u003e\\r\\n    {\\r\\n    \t#region Constructores\\r\\n\\r\\n        public _Serv\");\r\n\n#line 209\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 210\n\r\n            writer.Write(\"(ISession session): base(session){}\\r\\n        public _Serv\");\r\n\n#line 211\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 212\n\r\n            writer.Write(\"(IStatelessSession statelessSession): base(statelessSession){}\\r\\n        public _Serv\");\r\n\n#line 213\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 214\n\r\n            writer.Write(\"(ISession session, IStatelessSession statelessSession): base(session,statelessSession){}\\r\\n\\r\\n        #endregion\\r\\n             \\r\\n\");\r\n\n#line 215\n\r\n\t\tif(hasBorrar)\r\n\t\t{\r\n\n#line 216\n\r\n            writer.Write(\"   \\r\\n        public override bool Borrar(\");\r\n\n#line 217\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 218\n\r\n            writer.Write(\" pObj)\\r\\n        {\\r\\n            pObj.Borrado = \\\"1\\\";\\r\\n            return base.Actualizar (pObj) != null;\\r\\n        }\\r\\n\");\r\n\n#line 219\n\t\r\n\t\t}\r\n\n#line 220\n\r\n            writer.Write(\"\\r\\n    }\\r\\n\");\r\n\n#line 221\n\r\n\t}\r\n}\r\n\n#line 222\n\r\n            writer.Write(\"\\r\\n}\\r\\n\");\r\n\n#line 223\n\r\nwriter.Flush();\r\nwriter.Close();\r\nwriter.Dispose();\r\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\t\twriter = new StreamWriter(serverPath + @\"service\\Serv\" + table.tableNameClassName + \".cs\");\r\n\t\tColumns primaryColumn=null;\r\n\t\tforeach(Columns column in table.columns())\r\n\t\t{\r\n\t\t\tif(column.isPrimary==true)\r\n\t\t\t{\r\n\t\t\t\tprimaryColumn = column;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\n#line 224\n\r\n            writer.Write(\"\\r\\nusing \");\r\n\n#line 225\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 226\n\r\n            writer.Write(\".service.codegen;\\r\\nusing NHibernate;\\r\\n\\r\\nnamespace \");\r\n\n#line 227\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 228\n\r\n            writer.Write(\".service\\r\\n{\\r\\n    public class Serv\");\r\n\n#line 229\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 230\n\r\n            writer.Write(\" : _Serv\");\r\n\n#line 231\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 232\n\r\n            writer.Write(\"\\r\\n    {\\r\\n    \t#region Constructores\\r\\n\\r\\n        public Serv\");\r\n\n#line 233\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 234\n\r\n            writer.Write(\"(ISession session): base(session){}\\r\\n        public Serv\");\r\n\n#line 235\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 236\n\r\n            writer.Write(\"(IStatelessSession statelessSession): base(statelessSession){}\\r\\n        public Serv\");\r\n\n#line 237\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 238\n\r\n            writer.Write(\"(ISession session, IStatelessSession statelessSession): base(session,statelessSession){}\\r\\n\\r\\n        #endregion\\r\\n    }\\r\\n}\\r\\n\");\r\n\n#line 239\n\r\n\t\twriter.Flush();\r\n\t\twriter.Close();\r\n\t\twriter.Dispose();\r\n\t}\r\n}\r\n\r\n/*\r\n\r\nGENERACION CLASE ANDROID\r\n\r\n\r\n*/\r\n\r\nUtil.MakeDirectory(serverPath +  @\"android\");\r\nUtil.MakeDirectory(serverPath +  @\"android\\codegen\");\r\n\r\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\t\twriter = new StreamWriter(serverPath + @\"android\\codegen\\_\" + table.tableNameClassName + \".java\");\r\n\n#line 240\n\r\n            writer.Write(\"\\r\\npackage \");\r\n\n#line 241\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 242\n\r\n            writer.Write(\".next.data.codegen;\\r\\n\\r\\nimport com.alladio.next.data.IDto;\\r\\nimport com.alladio.next.utils.AlladioUtils;\\r\\nimport java.util.Date;\\r\\nimport android.database.Cursor;\\r\\nimport java.util.LinkedHashMap;\\r\\nimport java.math.BigDecimal;\\r\\n\\r\\npublic class _\");\r\n\n#line 243\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 244\n\r\n            writer.Write(\" implements IDto {\\r\\n\\r\\n\tpublic String getClassName(){return \\\"\");\r\n\n#line 245\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 246\n\r\n            writer.Write(\".dto.\");\r\n\n#line 247\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 248\n\r\n            writer.Write(\"Dto\\\";}\\r\\n\");\r\n\n#line 249\n\r\n\t\tforeach(Columns column in table.columns())\r\n\t\t{\r\n\t\t\t\r\n\t\t\tif(column.getJavaType().Equals(\"ulong\")==true){\r\n\n#line 250\n\r\n            writer.Write(\"\t\\r\\n\tprivate long \");\r\n\n#line 251\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 252\n\r\n            writer.Write(\";\\r\\n\tpublic long get\");\r\n\n#line 253\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 254\n\r\n            writer.Write(\"(){return \");\r\n\n#line 255\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 256\n\r\n            writer.Write(\";}\\r\\n\tpublic void set\");\r\n\n#line 257\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 258\n\r\n            writer.Write(\"(long \");\r\n\n#line 259\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 260\n\r\n            writer.Write(\"){this.\");\r\n\n#line 261\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 262\n\r\n            writer.Write(\" = \");\r\n\n#line 263\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 264\n\r\n            writer.Write(\";}\\r\\n\");\r\n\n#line 265\n\t\t\t}\r\n\t\t\telse if(column.getJavaType().Equals(\"byte\")==true){\r\n\n#line 266\n\r\n            writer.Write(\"\t\\r\\n\tprivate int \");\r\n\n#line 267\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 268\n\r\n            writer.Write(\";\\r\\n\tpublic int get\");\r\n\n#line 269\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 270\n\r\n            writer.Write(\"(){return \");\r\n\n#line 271\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 272\n\r\n            writer.Write(\";}\\r\\n\tpublic void set\");\r\n\n#line 273\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 274\n\r\n            writer.Write(\"(int \");\r\n\n#line 275\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 276\n\r\n            writer.Write(\"){this.\");\r\n\n#line 277\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 278\n\r\n            writer.Write(\" = \");\r\n\n#line 279\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 280\n\r\n            writer.Write(\";}\\r\\n\");\r\n\n#line 281\n\t\t\t}\r\n\t\t\telse{\r\n\n#line 282\n\r\n            writer.Write(\"\t\\r\\n\tprivate \");\r\n\n#line 283\n\r\n            writer.Write(column.getJavaType());\r\n\n#line 284\n\r\n            writer.Write(\" \");\r\n\n#line 285\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 286\n\r\n            writer.Write(\";\\r\\n\tpublic \");\r\n\n#line 287\n\r\n            writer.Write(column.getJavaType());\r\n\n#line 288\n\r\n            writer.Write(\" get\");\r\n\n#line 289\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 290\n\r\n            writer.Write(\"(){return \");\r\n\n#line 291\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 292\n\r\n            writer.Write(\";}\\r\\n\tpublic void set\");\r\n\n#line 293\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 294\n\r\n            writer.Write(\"(\");\r\n\n#line 295\n\r\n            writer.Write(column.getJavaType());\r\n\n#line 296\n\r\n            writer.Write(\" \");\r\n\n#line 297\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 298\n\r\n            writer.Write(\"){this.\");\r\n\n#line 299\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 300\n\r\n            writer.Write(\" = \");\r\n\n#line 301\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 302\n\r\n            writer.Write(\";}\\r\\n\");\r\n\n#line 303\n\t\t\t}\r\n\t\t}\r\n\n#line 304\n\r\n            writer.Write(\"\\r\\n\tpublic void setToCursor(Cursor cursor){\\r\\n\");\r\n\n#line 305\n\r\n\t\tforeach(Columns column in table.columns())\r\n\t\t{\r\n\t\t\tif(column.getJavaType().Equals(\"ulong\")==true){\r\n\n#line 306\n\r\n            writer.Write(\"\t\\r\\n\t\t\");\r\n\n#line 307\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 308\n\r\n            writer.Write(\" = cursor.getLong(cursor.getColumnIndex(\\\"\");\r\n\n#line 309\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 310\n\r\n            writer.Write(\"\\\"));\\r\\n\");\r\n\n#line 311\n\r\n\t\t\t}\r\n\t\t\telse if(column.getJavaType().Equals(\"byte\")==true){\r\n\n#line 312\n\r\n            writer.Write(\"\t\\r\\n\t\t\");\r\n\n#line 313\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 314\n\r\n            writer.Write(\" = cursor.getInt(cursor.getColumnIndex(\\\"\");\r\n\n#line 315\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 316\n\r\n            writer.Write(\"\\\"));\\r\\n\");\r\n\n#line 317\n\r\n\t\t\t}\r\n\t\t\telse if(column.getJavaType().Equals(\"BigDecimal\")==true){\r\n\n#line 318\n\r\n            writer.Write(\"\t\\r\\n\t\t\");\r\n\n#line 319\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 320\n\r\n            writer.Write(\" = BigDecimal.valueOf(cursor.getDouble(cursor.getColumnIndex(\\\"\");\r\n\n#line 321\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 322\n\r\n            writer.Write(\"\\\")));\\r\\n\");\r\n\n#line 323\n\r\n\t\t\t}\r\n\t\t\telse if(column.getJavaType().Equals(\"Date\")==true){\r\n\n#line 324\n\r\n            writer.Write(\"\t\\r\\n\t\t\");\r\n\n#line 325\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 326\n\r\n            writer.Write(\" = new Date(cursor.getLong(cursor.getColumnIndex(\\\"\");\r\n\n#line 327\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 328\n\r\n            writer.Write(\"\\\")));\\r\\n\");\r\n\n#line 329\n\r\n\t\t\t}else if(column.getJavaType().Equals(\"ulong\")==true){\r\n\n#line 330\n\r\n            writer.Write(\"\t\\r\\n\t\t\");\r\n\n#line 331\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 332\n\r\n            writer.Write(\" = new Date(cursor.getLong(cursor.getColumnIndex(\\\"\");\r\n\n#line 333\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 334\n\r\n            writer.Write(\"\\\")));\\r\\n\");\r\n\n#line 335\n\r\n\t\t\t}\r\n\t\t\telse{\r\n\n#line 336\n\r\n            writer.Write(\"\t\\r\\n\t\t\");\r\n\n#line 337\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 338\n\r\n            writer.Write(\" = cursor.get\");\r\n\n#line 339\n\r\n            writer.Write( column.getJavaType().Substring(0,1).ToUpper() + column.getJavaType().Substring(1,column.getJavaType().Length-1) );\r\n\n#line 340\n\r\n            writer.Write(\"(cursor.getColumnIndex(\\\"\");\r\n\n#line 341\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 342\n\r\n            writer.Write(\"\\\"));\\r\\n\");\r\n\n#line 343\n\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\n#line 344\n\r\n            writer.Write(\"\t\t\\r\\n\t}\\r\\n\t\\r\\n\tpublic void setToHashmap(LinkedHashMap\u003cString, Object\u003e data)\\r\\n\t{\\r\\n\");\r\n\n#line 345\n\r\n\t\tforeach(Columns column in table.columns())\r\n\t\t{\r\n\t\t\tif(column.getJavaType().Equals(\"ulong\")==true){\r\n\n#line 346\n\r\n            writer.Write(\"\t\\r\\n\t\t\");\r\n\n#line 347\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 348\n\r\n            writer.Write(\" = Long.valueOf(AlladioUtils.getValue(data.get(\\\"\");\r\n\n#line 349\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 350\n\r\n            writer.Write(\"\\\"), \\\"0\\\"));\\r\\n\");\r\n\n#line 351\n\r\n\t\t\t}\r\n\t\t\telse if(column.getJavaType().Equals(\"Date\")==true){\r\n\n#line 352\n\r\n            writer.Write(\"\t\\r\\n\t\t\");\r\n\n#line 353\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 354\n\r\n            writer.Write(\" = new Date(Long.parseLong(data.get(\\\"\");\r\n\n#line 355\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 356\n\r\n            writer.Write(\"\\\").toString().replaceAll(\\\"/Date\\\",\\\"\\\").replaceAll(\\\"/\\\",\\\"\\\").replace(\u0027(\u0027, \u0027 \u0027).replace(\u0027)\u0027, \u0027 \u0027).replaceAll(\\\" \\\",\\\"\\\")));\\r\\n\");\r\n\n#line 357\n\r\n\t\t\t}\r\n\t\t\telse if(column.getJavaType().Equals(\"String\")==true){\r\n\n#line 358\n\r\n            writer.Write(\"\t\\r\\n\t\t\");\r\n\n#line 359\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 360\n\r\n            writer.Write(\" = (\");\r\n\n#line 361\n\r\n            writer.Write(column.getJavaType());\r\n\n#line 362\n\r\n            writer.Write(\") data.get(\\\"\");\r\n\n#line 363\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 364\n\r\n            writer.Write(\"\\\");\\r\\n\");\r\n\n#line 365\n\t\t\t\r\n\t\t\t}\r\n\t\t\telse if(column.getJavaType().Equals(\"int\")==true || \r\n\t\t\t\tcolumn.getJavaType().Equals(\"byte\")==true){\r\n\n#line 366\n\r\n            writer.Write(\"\t\\r\\n\t\t\");\r\n\n#line 367\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 368\n\r\n            writer.Write(\" = Integer.valueOf(AlladioUtils.getValue(data.get(\\\"\");\r\n\n#line 369\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 370\n\r\n            writer.Write(\"\\\"), \\\"0\\\"));\\r\\n\");\r\n\n#line 371\n\t\t\t\r\n\t\t\t}\r\n\t\t\telse if(column.getJavaType().Equals(\"BigDecimal\")==true){\r\n\n#line 372\n\r\n            writer.Write(\"\t\\r\\n\t\t\");\r\n\n#line 373\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 374\n\r\n            writer.Write(\" = BigDecimal.valueOf(Double.valueOf(AlladioUtils.getValue(data.get(\\\"\");\r\n\n#line 375\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 376\n\r\n            writer.Write(\"\\\"), \\\"0\\\")));\\r\\n\");\r\n\n#line 377\n\t\t\t\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\n#line 378\n\r\n            writer.Write(\"\t\\r\\n\t\t\");\r\n\n#line 379\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 380\n\r\n            writer.Write(\" = \");\r\n\n#line 381\n\r\n            writer.Write( column.getJavaType().Substring(0,1).ToUpper() + column.getJavaType().Substring(1,column.getJavaType().Length-1) );\r\n\n#line 382\n\r\n            writer.Write(\".valueOf(AlladioUtils.getValue(data.get(\\\"\");\r\n\n#line 383\n\r\n            writer.Write(column.getColumnNameUpper());\r\n\n#line 384\n\r\n            writer.Write(\"\\\"), \\\"0\\\"));\\r\\n\");\r\n\n#line 385\n\t\t\t\t\r\n\t\t\t}\r\n\t\t}\r\n\n#line 386\n\r\n            writer.Write(\"\t\t\\r\\n\t}\t\t\\r\\n}\\r\\n\");\r\n\n#line 387\n\t\r\n\twriter.Flush();\r\n\twriter.Close();\r\n\twriter.Dispose();\r\n\t}\r\n}\r\n\r\n\r\nforeach(Tables table in templateProject.tables)\r\n{\r\n\tif(table.selected)\r\n\t{\r\n\t\twriter = new StreamWriter(serverPath + @\"android\\\" + table.tableNameClassName + \".java\");\r\n\n#line 388\n\r\n            writer.Write(\"\\r\\npackage \");\r\n\n#line 389\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 390\n\r\n            writer.Write(\".next.data;\\r\\n\\r\\nimport  \");\r\n\n#line 391\n\r\n            writer.Write(templateProject.namespaceBase);\r\n\n#line 392\n\r\n            writer.Write(\".next.data.codegen.*;\\r\\n\\r\\npublic class \");\r\n\n#line 393\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 394\n\r\n            writer.Write(\" extends _\");\r\n\n#line 395\n\r\n            writer.Write(table.tableNameClassName);\r\n\n#line 396\n\r\n            writer.Write(\" {\\r\\n\\r\\n}\\r\\n\");\r\n\n#line 397\n\t\r\n\twriter.Flush();\r\n\twriter.Close();\r\n\twriter.Dispose();\r\n\t}\r\n}\r\n\r\n\r\nSystem.Diagnostics.Process.Start(serverPath);\r\n\r\n\r\n        }\r\n    }","directoryPath":"D:\\PROYECTOS\\MEM\\code\\trunk\\codegen\\","connectionString":"server=localhost;User Id=root; pwd=root; database=mem_db;","providerName":"MySql","dataBaseName":"mem_db","namespaceBase":"MEMDataService.com.gq"}